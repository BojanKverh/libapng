#pragma once

#include "crc.h"

#include <optional>

#include <QByteArray>

class QFile;

namespace png {
/**
 * @brief The Chunk class This struct holds data about an individual chunk
 */
struct Chunk {
    quint32 m_uiLength;
    QByteArray m_baName;
    QByteArray m_baContent;
    QByteArray m_baCRC;

    /**
     * @brief size Returns the size of the chunk
     * @return chunk size in [bytes]
     */
    quint32 size() const { return 4 + m_baName.size() + m_baContent.size() + m_baCRC.size(); }
};
/**
 * @brief The BasePNG class This class contains some basic PNG definitions
 */
class Base
{
protected:
    /**
   * @brief convert Converts the 32-bit value into QByteArray
   * @param uiValue Value to convert
   * @return Generated byte array
   */
    QByteArray convert(quint32 uiValue) const;
    /**
   * @brief convert Converts the first four bytes of array into quint32
   * @param rba Byte array to convert
   * @return calculated value
   */
    quint32 convert(const QByteArray& rba) const;
    /**
     * @brief crc Returns the chunk CRC
     * @param rChunk Reference to the chunk, for which the CRC will be calculated
     * @return Calculated crc
     */
    quint32 crc(const Chunk& rChunk) const;
    /**
   * @brief readChunk Reads one chunk of data
   * @param rba Byte array to read from
   * @param riOffset Reference to the offset variable, which denotes the start of reading
   * @return read chunk data or an empty value, if the chunk could not be read
   */
    std::optional<Chunk> readChunk(const QByteArray& rba, quint32 &riOffset) const;
    /**
     * @brief writeChunk Appends the chunk into
     * @param rba Byte array, where the chunk will be appended to
     * @param rChunk Reference to the chunk to be appended
     * @param bCalcCRC Indicates, whether the CRC has to be recalculated
     */
    void writeChunk(QByteArray& rba, const Chunk& rChunk, bool bCalcCRC = false) const;
    /**
     * @brief writeChunk Writes the chunk directly to file
     * @param rF Reference to the file to write into
     * @param rChunk Reference to the chunk to write into the file
     * @param bCalcCRC Indicates, whether the CRC has to be recalculated
     */
    void writeChunk(QFile& rF, const Chunk& rChunk, bool bCalcCRC = false) const;
    /**
     * @brief actl Returns the ACTL chunk
     * @param iCount Number of frames
     * @param iRepeat Number of animation repeatitions
     * @return ACTL chunk
     */
    Chunk actl(quint32 iCount, quint32 iRepeat = 0U) const;
    /**
     * @brief fctl Returns the FCTL chunk
     * @param i FCTL index
     * @param iW Frame width in [pixels]
     * @param iH Frame height in [pixels]
     * @param iFPS Frames per second rate
     * @param iX Horizontal offset in pixels
     * @param iY Vertical offset in pixels
     * @param iDispose Dispose method indicator. Possible values are 0, 1 and 2
     * @param iBlend Blend method indicator. Possible values are 0 and 1
     * @return FCTL chunk
     */
    Chunk fctl(int i, int iW, int iH, int iFPS, int iX, int iY, int iDispose = 0, int iBlend = 0) const;
    /**
     * @brief iend Returns the IEND chunk
     * @return IEND chunk
     */
    Chunk iend() const;

protected:
    CRC m_crc;

    const QByteArray m_cbaSig  = QByteArray::fromHex("89504E470D0A1A0A");
    const QByteArray m_cbaIDAT = QByteArray::fromHex("49444154");
    const QByteArray m_cbaIHDR = QByteArray::fromHex("49484452");
    const QByteArray m_cbaACTL = QByteArray::fromHex("6163544C");
    const QByteArray m_cbaFCTL = QByteArray::fromHex("6663544C");
    const QByteArray m_cbaFDAT = QByteArray::fromHex("66644154");
    const QByteArray m_cbaIEND = QByteArray::fromHex("49454E44");

    const quint32 m_cuiLibPngLimit = 8192U;
};

}
